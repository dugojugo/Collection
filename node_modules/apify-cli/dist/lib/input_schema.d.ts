/**
 * Return the input schema from the default location.
 *
 * When the input schema does not exist, null is returned for schema.
 * In such a case, path would be set to the location
 * where the input schema would be expected to be found (and e.g. can be created there).
 */
export declare const readInputSchema: ({ forcePath, cwd }?: {
    forcePath?: string;
    cwd: string;
}) => Promise<{
    inputSchema: Record<string, unknown> | undefined;
    inputSchemaPath: string;
} | {
    inputSchema: Record<string, unknown>;
    inputSchemaPath: null;
} | {
    inputSchema: null;
    inputSchemaPath: string;
}>;
/**
 * Goes to the Actor directory and creates INPUT.json file from the input schema prefills.

 */
export declare const createPrefilledInputFileFromInputSchema: (actorFolderDir: string) => Promise<void>;
export declare const getDefaultsFromInputSchema: (inputSchema: any) => Record<string, unknown>;
export declare const getAjvValidator: (inputSchema: any, ajvInstance: import("ajv").Ajv) => import("ajv").ValidateFunction<unknown>;
//# sourceMappingURL=input_schema.d.ts.map