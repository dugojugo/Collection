export declare enum CompactMode {
    /**
     * Print the table as is
     */
    None = -1,
    /**
     * Minimized version of the table, with no separators between rows
     */
    VeryCompact = 0,
    /**
     * A version of the compact table that looks akin to the web console (fewer separators, but with lines between rows)
     */
    WebLikeCompact = 1,
    /**
     * Straight up no lines, just two spaces in the middle of columns
     */
    NoLines = 2
}
/** @internal */
export declare const kSkipColumn: unique symbol;
export interface ResponsiveTableOptions<AllColumns extends string> {
    /**
     * Represents all the columns the that this table should show, and their order
     */
    allColumns: AllColumns[];
    /**
     * Represents the columns that are mandatory for the user to see, even if the terminal size is less than adequate (<100).
     * Make sure this field includes columns that provide enough context AND that will fit in an 80-column terminal.
     */
    mandatoryColumns: NoInfer<AllColumns>[];
    /**
     * By default, all columns are left-aligned. You can specify columns that should be aligned in the middle or right
     */
    columnAlignments?: Partial<Record<AllColumns, 'left' | 'center' | 'right'>>;
    /**
     * An array of hidden columns, that can be used to store extra data in a table row, to then render differently in the table based on size constraints
     */
    hiddenColumns?: NoInfer<AllColumns>[];
    /**
     * A set of different column and value overrides for specific columns based on size constraints
     */
    breakpointOverrides?: {
        small: {
            [column in NoInfer<AllColumns>]?: {
                label?: string;
                /**
                 * The actual column to fetch the value from
                 */
                valueFrom?: NoInfer<AllColumns>;
            };
        };
    };
}
export declare class ResponsiveTable<AllColumns extends string> {
    private options;
    private rows;
    constructor(options: ResponsiveTableOptions<AllColumns>);
    pushRow(item: Record<AllColumns, string | typeof kSkipColumn>): void;
    render(compactMode: CompactMode): string;
    static isSmallTerminal(): boolean;
}
//# sourceMappingURL=responsive-table.d.ts.map