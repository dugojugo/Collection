import { Args, Flags } from '@oclif/core';
import { DownloadItemsFormat } from 'apify-client';
import { ApifyCommand } from '../../lib/apify_command.js';
import { error, simpleLog } from '../../lib/outputs.js';
import { getLocalUserInfo, getLoggedClientOrThrow } from '../../lib/utils.js';
const downloadFormatToContentType = {
    [DownloadItemsFormat.JSON]: 'application/json',
    [DownloadItemsFormat.JSONL]: 'application/jsonl',
    [DownloadItemsFormat.CSV]: 'text/csv',
    [DownloadItemsFormat.HTML]: 'text/html',
    [DownloadItemsFormat.RSS]: 'application/rss+xml',
    [DownloadItemsFormat.XML]: 'application/xml',
    [DownloadItemsFormat.XLSX]: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
};
export class DatasetsGetItems extends ApifyCommand {
    static description = 'Retrieves dataset items in specified format (JSON, CSV, etc).';
    static flags = {
        limit: Flags.integer({
            description: 'The amount of elements to get from the dataset. By default, it will return all available items.',
        }),
        offset: Flags.integer({
            description: 'The offset in the dataset where to start getting items.',
        }),
        format: 
        // This cast is used to turn the `format` field into a strictly typed value when using it in the run function,
        // giving it the DownloadItemsFormat type
        Flags.string({
            description: "The format of the returned output. By default, it is set to 'json'",
            options: Object.keys(downloadFormatToContentType),
            default: DownloadItemsFormat.JSON,
        }),
    };
    static args = {
        datasetId: Args.string({
            description: 'The ID of the Dataset to export the items for',
            required: true,
        }),
    };
    async run() {
        const { limit, offset, format } = this.flags;
        const { datasetId } = this.args;
        const apifyClient = await getLoggedClientOrThrow();
        const maybeDataset = await this.tryToGetDataset(apifyClient, datasetId);
        if (!maybeDataset) {
            error({ message: `Dataset with ID "${datasetId}" not found.` });
            return;
        }
        const { datasetClient } = maybeDataset;
        // Write something already to stdout
        process.stdout.write('');
        const result = await datasetClient.downloadItems(format, {
            limit,
            offset,
        });
        const contentType = downloadFormatToContentType[format] ?? 'application/octet-stream';
        simpleLog({ message: contentType });
        process.stdout.write(result);
        process.stdout.write('\n');
    }
    async tryToGetDataset(client, datasetId) {
        const byIdOrName = await client
            .dataset(datasetId)
            .get()
            .catch(() => undefined);
        if (byIdOrName) {
            return {
                dataset: byIdOrName,
                datasetClient: client.dataset(byIdOrName.id),
            };
        }
        const info = await getLocalUserInfo();
        const byName = await client
            .dataset(`${info.username}/${datasetId}`)
            .get()
            .catch(() => undefined);
        if (byName) {
            return {
                dataset: byName,
                datasetClient: client.dataset(byName.id),
            };
        }
        return null;
    }
}
//# sourceMappingURL=get-items.js.map