import Ajv, { ErrorObject, ValidateFunction } from 'ajv';

/**
 * Helper function to simulate intl formatMessage function
 */
declare function m(stringId: string, variables?: Record<string, any>): string;

var title = "JSON schema of Apify Actor INPUT_SCHEMA.json";
var type = "object";
var properties = {
	$schema: {
		type: "string"
	},
	title: {
		type: "string"
	},
	schemaVersion: {
		type: "integer",
		minimum: 1,
		maximum: 1
	},
	description: {
		type: "string"
	},
	type: {
		"enum": [
			"object"
		]
	},
	required: {
		type: "array",
		minItems: 0,
		items: {
			type: "string"
		},
		uniqueItems: true
	},
	additionalProperties: {
		type: "boolean"
	},
	properties: {
		type: "object",
		patternProperties: {
			"^": {
				oneOf: [
					{
						$ref: "#/definitions/stringProperty"
					},
					{
						$ref: "#/definitions/stringEnumProperty"
					},
					{
						$ref: "#/definitions/arrayProperty"
					},
					{
						$ref: "#/definitions/objectProperty"
					},
					{
						$ref: "#/definitions/integerProperty"
					},
					{
						$ref: "#/definitions/booleanProperty"
					},
					{
						$ref: "#/definitions/resourceProperty"
					},
					{
						$ref: "#/definitions/resourceArrayProperty"
					},
					{
						$ref: "#/definitions/anyProperty"
					}
				]
			}
		}
	}
};
var additionalProperties = false;
var required = [
	"title",
	"type",
	"properties",
	"schemaVersion"
];
var definitions = {
	stringEnumProperty: {
		title: "Enum property",
		type: "object",
		additionalProperties: false,
		properties: {
			type: {
				"enum": [
					"string"
				]
			},
			editor: {
				"enum": [
					"select"
				]
			},
			title: {
				type: "string"
			},
			description: {
				type: "string"
			},
			"default": {
				type: "string"
			},
			prefill: {
				type: "string"
			},
			example: {
				type: "string"
			},
			nullable: {
				type: "boolean"
			},
			sectionCaption: {
				type: "string"
			},
			sectionDescription: {
				type: "string"
			},
			"enum": {
				type: "array",
				items: {
					type: "string"
				},
				minItems: 1,
				uniqueItems: true
			},
			enumTitles: {
				type: "array",
				items: {
					type: "string"
				},
				minItems: 1
			}
		},
		required: [
			"type",
			"title",
			"description",
			"enum"
		]
	},
	stringProperty: {
		title: "String property",
		type: "object",
		additionalProperties: true,
		properties: {
			type: {
				"enum": [
					"string"
				]
			},
			title: {
				type: "string"
			},
			description: {
				type: "string"
			},
			nullable: {
				type: "boolean"
			},
			editor: {
				"enum": [
					"javascript",
					"python",
					"textfield",
					"textarea",
					"datepicker",
					"hidden",
					"fileupload"
				]
			},
			isSecret: {
				type: "boolean"
			}
		},
		required: [
			"type",
			"title",
			"description",
			"editor"
		],
		"if": {
			properties: {
				isSecret: {
					not: {
						"const": true
					}
				}
			}
		},
		then: {
			"if": {
				properties: {
					editor: {
						"const": "datepicker"
					}
				}
			},
			then: {
				additionalProperties: false,
				properties: {
					type: {
						"enum": [
							"string"
						]
					},
					title: {
						type: "string"
					},
					description: {
						type: "string"
					},
					"default": {
						type: "string"
					},
					prefill: {
						type: "string"
					},
					example: {
						type: "string"
					},
					pattern: {
						type: "string"
					},
					nullable: {
						type: "boolean"
					},
					minLength: {
						type: "integer"
					},
					maxLength: {
						type: "integer"
					},
					editor: {
						"enum": [
							"datepicker"
						]
					},
					sectionCaption: {
						type: "string"
					},
					sectionDescription: {
						type: "string"
					},
					dateType: {
						"enum": [
							"absolute",
							"relative",
							"absoluteOrRelative"
						]
					}
				}
			},
			"else": {
				additionalProperties: false,
				properties: {
					type: {
						"enum": [
							"string"
						]
					},
					title: {
						type: "string"
					},
					description: {
						type: "string"
					},
					"default": {
						type: "string"
					},
					prefill: {
						type: "string"
					},
					example: {
						type: "string"
					},
					pattern: {
						type: "string"
					},
					nullable: {
						type: "boolean"
					},
					minLength: {
						type: "integer"
					},
					maxLength: {
						type: "integer"
					},
					editor: {
						"enum": [
							"javascript",
							"python",
							"textfield",
							"textarea",
							"hidden",
							"fileupload"
						]
					},
					isSecret: {
						"enum": [
							false
						]
					},
					sectionCaption: {
						type: "string"
					},
					sectionDescription: {
						type: "string"
					}
				}
			}
		},
		"else": {
			additionalProperties: false,
			properties: {
				type: {
					"enum": [
						"string"
					]
				},
				title: {
					type: "string"
				},
				description: {
					type: "string"
				},
				example: {
					type: "string"
				},
				nullable: {
					type: "boolean"
				},
				editor: {
					"enum": [
						"textfield",
						"textarea",
						"hidden"
					]
				},
				isSecret: {
					"enum": [
						true
					]
				},
				sectionCaption: {
					type: "string"
				},
				sectionDescription: {
					type: "string"
				}
			}
		}
	},
	arrayProperty: {
		title: "Array property",
		type: "object",
		properties: {
			type: {
				"enum": [
					"array"
				]
			},
			editor: {
				"enum": [
					"json",
					"requestListSources",
					"pseudoUrls",
					"globs",
					"keyValue",
					"stringList",
					"select",
					"hidden"
				]
			}
		},
		additionalProperties: true,
		required: [
			"type",
			"title",
			"description",
			"editor"
		],
		"if": {
			properties: {
				editor: {
					"const": "select"
				}
			}
		},
		then: {
			additionalProperties: false,
			required: [
				"items"
			],
			properties: {
				type: {
					"enum": [
						"array"
					]
				},
				editor: {
					"enum": [
						"select"
					]
				},
				title: {
					type: "string"
				},
				description: {
					type: "string"
				},
				"default": {
					type: "array"
				},
				prefill: {
					type: "array"
				},
				example: {
					type: "array"
				},
				nullable: {
					type: "boolean"
				},
				minItems: {
					type: "integer"
				},
				maxItems: {
					type: "integer"
				},
				uniqueItems: {
					type: "boolean"
				},
				sectionCaption: {
					type: "string"
				},
				sectionDescription: {
					type: "string"
				},
				items: {
					type: "object",
					additionalProperties: false,
					properties: {
						type: {
							"enum": [
								"string"
							]
						},
						"enum": {
							type: "array",
							items: {
								type: "string"
							},
							uniqueItems: true
						},
						enumTitles: {
							type: "array",
							items: {
								type: "string"
							}
						}
					},
					required: [
						"type",
						"enum"
					]
				}
			}
		},
		"else": {
			additionalProperties: false,
			properties: {
				type: {
					"enum": [
						"array"
					]
				},
				editor: {
					"enum": [
						"json",
						"requestListSources",
						"pseudoUrls",
						"globs",
						"keyValue",
						"stringList",
						"hidden"
					]
				},
				title: {
					type: "string"
				},
				description: {
					type: "string"
				},
				"default": {
					type: "array"
				},
				prefill: {
					type: "array"
				},
				example: {
					type: "array"
				},
				nullable: {
					type: "boolean"
				},
				minItems: {
					type: "integer"
				},
				maxItems: {
					type: "integer"
				},
				uniqueItems: {
					type: "boolean"
				},
				sectionCaption: {
					type: "string"
				},
				sectionDescription: {
					type: "string"
				},
				placeholderKey: {
					type: "string"
				},
				placeholderValue: {
					type: "string"
				},
				patternKey: {
					type: "string"
				},
				patternValue: {
					type: "string"
				}
			}
		}
	},
	objectProperty: {
		title: "Object property",
		type: "object",
		additionalProperties: false,
		properties: {
			type: {
				"enum": [
					"object"
				]
			},
			title: {
				type: "string"
			},
			description: {
				type: "string"
			},
			"default": {
				type: "object"
			},
			prefill: {
				type: "object"
			},
			example: {
				type: "object"
			},
			patternKey: {
				type: "string"
			},
			patternValue: {
				type: "string"
			},
			nullable: {
				type: "boolean"
			},
			minProperties: {
				type: "integer"
			},
			maxProperties: {
				type: "integer"
			},
			editor: {
				"enum": [
					"json",
					"proxy",
					"hidden"
				]
			},
			sectionCaption: {
				type: "string"
			},
			sectionDescription: {
				type: "string"
			}
		},
		required: [
			"type",
			"title",
			"description",
			"editor"
		]
	},
	integerProperty: {
		title: "Integer property",
		type: "object",
		additionalProperties: false,
		properties: {
			type: {
				"enum": [
					"integer"
				]
			},
			title: {
				type: "string"
			},
			description: {
				type: "string"
			},
			"default": {
				type: "integer"
			},
			prefill: {
				type: "integer"
			},
			example: {
				type: "integer"
			},
			nullable: {
				type: "boolean"
			},
			minimum: {
				type: "integer"
			},
			maximum: {
				type: "integer"
			},
			unit: {
				type: "string"
			},
			editor: {
				"enum": [
					"number",
					"hidden"
				]
			},
			sectionCaption: {
				type: "string"
			},
			sectionDescription: {
				type: "string"
			}
		},
		required: [
			"type",
			"title",
			"description"
		]
	},
	booleanProperty: {
		title: "Boolean property",
		type: "object",
		additionalProperties: false,
		properties: {
			type: {
				"enum": [
					"boolean"
				]
			},
			title: {
				type: "string"
			},
			description: {
				type: "string"
			},
			"default": {
				type: "boolean"
			},
			prefill: {
				type: "boolean"
			},
			example: {
				type: "boolean"
			},
			nullable: {
				type: "boolean"
			},
			groupCaption: {
				type: "string"
			},
			groupDescription: {
				type: "string"
			},
			editor: {
				"enum": [
					"checkbox",
					"hidden"
				]
			},
			sectionCaption: {
				type: "string"
			},
			sectionDescription: {
				type: "string"
			}
		},
		required: [
			"type",
			"title",
			"description"
		]
	},
	resourceProperty: {
		title: "Resource property",
		type: "object",
		additionalProperties: false,
		properties: {
			type: {
				"enum": [
					"string"
				]
			},
			title: {
				type: "string"
			},
			description: {
				type: "string"
			},
			editor: {
				"enum": [
					"resourcePicker",
					"hidden"
				]
			},
			resourceType: {
				"enum": [
					"dataset",
					"keyValueStore",
					"requestQueue"
				]
			},
			"default": {
				type: "string"
			},
			prefill: {
				type: "string"
			},
			example: {
				type: "string"
			},
			nullable: {
				type: "boolean"
			},
			sectionCaption: {
				type: "string"
			},
			sectionDescription: {
				type: "string"
			}
		},
		required: [
			"type",
			"title",
			"description",
			"resourceType"
		]
	},
	resourceArrayProperty: {
		title: "Resource array property",
		type: "object",
		additionalProperties: false,
		properties: {
			type: {
				"enum": [
					"array"
				]
			},
			title: {
				type: "string"
			},
			description: {
				type: "string"
			},
			editor: {
				"enum": [
					"resourcePicker",
					"hidden"
				]
			},
			"default": {
				type: "array"
			},
			prefill: {
				type: "array"
			},
			example: {
				type: "array"
			},
			nullable: {
				type: "boolean"
			},
			minItems: {
				type: "integer"
			},
			maxItems: {
				type: "integer"
			},
			uniqueItems: {
				type: "boolean"
			},
			resourceType: {
				"enum": [
					"dataset",
					"keyValueStore",
					"requestQueue"
				]
			},
			sectionCaption: {
				type: "string"
			},
			sectionDescription: {
				type: "string"
			}
		},
		required: [
			"type",
			"title",
			"description",
			"resourceType"
		]
	},
	anyProperty: {
		title: "Any property",
		type: "object",
		additionalProperties: false,
		properties: {
			type: {
				type: [
					"array"
				],
				items: {
					type: "string",
					"enum": [
						"object",
						"array",
						"string",
						"integer",
						"boolean"
					]
				},
				uniqueItems: true,
				additionalItems: false,
				minItems: 1
			},
			title: {
				type: "string"
			},
			description: {
				type: "string"
			},
			"default": {
				type: [
					"object",
					"array",
					"string",
					"integer",
					"boolean"
				]
			},
			prefill: {
				type: [
					"object",
					"array",
					"string",
					"integer",
					"boolean"
				]
			},
			example: {
				type: [
					"object",
					"array",
					"string",
					"integer",
					"boolean"
				]
			},
			nullable: {
				type: "boolean"
			},
			editor: {
				"enum": [
					"json",
					"hidden"
				]
			},
			sectionCaption: {
				type: "string"
			},
			sectionDescription: {
				type: "string"
			}
		},
		required: [
			"type",
			"title",
			"description",
			"editor"
		]
	}
};
var schema = {
	title: title,
	type: type,
	properties: properties,
	additionalProperties: additionalProperties,
	required: required,
	definitions: definitions
};

type CommonFieldDefinition<T> = {
    title: string;
    description: string;
    default?: T;
    prefill?: T;
    example?: T;
    nullable?: boolean;
    sectionCaption?: string;
    sectionDescription?: string;
};
type StringFieldDefinition = CommonFieldDefinition<string> & {
    type: 'string';
    editor: 'textfield' | 'textarea' | 'javascript' | 'python' | 'select' | 'datepicker' | 'hidden' | 'json' | 'fileupload';
    pattern?: string;
    minLength?: number;
    maxLength?: number;
    enum?: readonly string[];
    enumTitles?: readonly string[];
    isSecret?: boolean;
    dateType?: 'absolute' | 'relative' | 'absoluteOrRelative';
};
type BooleanFieldDefinition = CommonFieldDefinition<boolean> & {
    type: 'boolean';
    editor?: 'checkbox' | 'hidden';
    groupCaption?: string;
    groupDescription?: string;
};
type IntegerFieldDefinition = CommonFieldDefinition<number> & {
    type: 'integer';
    editor?: 'number' | 'hidden';
    maximum?: number;
    minimum?: number;
    unit?: string;
};
type ObjectFieldDefinition = CommonFieldDefinition<object> & {
    type: 'object';
    editor: 'json' | 'proxy' | 'hidden';
    patternKey?: string;
    patternValue?: string;
    maxProperties?: number;
    minProperties?: number;
};
type ArrayFieldDefinition = CommonFieldDefinition<unknown[]> & {
    type: 'array';
    editor: 'json' | 'requestListSources' | 'pseudoUrls' | 'globs' | 'keyValue' | 'stringList' | 'select' | 'hidden';
    placeholderKey?: string;
    placeholderValue?: string;
    patternKey?: string;
    patternValue?: string;
    maxItems?: number;
    minItems?: number;
    uniqueItems?: boolean;
    items?: unknown;
};
type CommonResourceFieldDefinition<T> = CommonFieldDefinition<T> & {
    editor?: 'resourcePicker' | 'hidden';
    resourceType: 'dataset' | 'keyValueStore' | 'requestQueue';
};
type ResourceFieldDefinition = CommonResourceFieldDefinition<string> & {
    type: 'string';
};
type ResourceArrayFieldDefinition = CommonResourceFieldDefinition<string[]> & {
    type: 'array';
    maxItems?: number;
    minItems?: number;
    uniqueItems?: boolean;
};
type AllTypes = StringFieldDefinition['type'] | BooleanFieldDefinition['type'] | IntegerFieldDefinition['type'] | ObjectFieldDefinition['type'] | ArrayFieldDefinition['type'];
type MixedFieldDefinition = CommonFieldDefinition<never> & {
    type: readonly AllTypes[];
    editor: 'json';
};
type FieldDefinition = StringFieldDefinition | BooleanFieldDefinition | IntegerFieldDefinition | ObjectFieldDefinition | ArrayFieldDefinition | MixedFieldDefinition | ResourceFieldDefinition | ResourceArrayFieldDefinition;
/**
 * Type with checked base & properties
 */
type InputSchema = {
    type: 'object';
    title: string;
    description?: string;
    schemaVersion: number;
    properties: Record<string, FieldDefinition>;
    required?: readonly string[];
    $schema?: unknown;
};

/**
 * This function parses AJV error and transforms it into a readable string.
 *
 * @param error An error as returned from AJV.
 * @param rootName Usually 'input' or 'schema' based on if we are passing the input or schema.
 * @param properties (Used only when parsing input errors) List of input schema properties.
 * @param input (Used only when parsing input errors) Actual input that is being parsed.
 * @returns {null|{fieldKey: *, message: *}}
 */
declare function parseAjvError(error: ErrorObject, rootName: string, properties?: Record<string, {
    nullable?: boolean;
    editor?: string;
}>, input?: Record<string, unknown>): {
    fieldKey: string;
    message: string;
} | null;
/**
 * Validates that all required fields are present in properties list
 */
declare function validateExistenceOfRequiredFields(inputSchema: InputSchema): void;
/**
 * This function validates given input schema first just for basic structure then each field one by one,
 * then checks that all required fields are present and finally checks fully against the whole schema.
 *
 * This way we get the most accurate error message for user.
 */
declare function validateInputSchema(validator: Ajv, inputSchema: Record<string, unknown>): asserts inputSchema is InputSchema;

/**
 * Uses AJV validator to validate input with input schema and then
 * does custom validation for our own properties (nullable, patternKey, patternValue)
 * @param validator Initialized AJV validator
 * @param inputSchema Valid input schema in object
 * @param input Input object to be validated
 * @param options (Optional) Additional validation configuration for certain fields
 */
declare function validateInputUsingValidator(validator: ValidateFunction, inputSchema: Record<string, any>, input: Record<string, unknown>, options?: Record<string, any>): {
    fieldKey: string;
    message: string;
}[];
/**
 * This functions parses all given JSON and then takes each of the jsFields.
 * Then if the field:
 * - is valid JS single function it replaces its single line string with a function delacation.
 * - is valid multiline JS code then replaces its single line string with `multiline` string
 * Then stringifies the code with given number of jsonSpacing spaces and finally prefixes whole
 * stringified JSON except the first line with globalSpacing spaces.
 */
declare function makeInputJsFieldsReadable(json: string, jsFields: string[], jsonSpacing?: number, globalSpacing?: number): string;

export { type ArrayFieldDefinition, type BooleanFieldDefinition, type FieldDefinition, type InputSchema, type IntegerFieldDefinition, type MixedFieldDefinition, type ObjectFieldDefinition, type StringFieldDefinition, schema as inputSchema, m, makeInputJsFieldsReadable, parseAjvError, validateExistenceOfRequiredFields, validateInputSchema, validateInputUsingValidator };
